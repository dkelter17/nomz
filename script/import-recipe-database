#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csv'
require 'json'
require 'jekyll'

NOMZ_PROD_URL = "https://dkelter17.github.io/nomz"

tsv_db_file_path = ARGV.first
if tsv_db_file_path.nil? || tsv_db_file_path.empty? || !File.exist?(tsv_db_file_path)
  abort "script/import-recipe-database <tsv_file_path>"
end

output_json_file_path = "_data/recipe_database.json"

# {
#   "Recipe Name": "Minty Lamb Meatballs with Crispy Cabbage and Tahini Sauce",
#   "Source": "Cook This Book p. 97",
#   "Author": "Molly Baz",
#   "Category": "Dinner",
#   "Protein": "Lamb",
#   "Herbs": "Mint",
#   "Day of Week": "Weekday",
#   "Feeds": "4",
#   "Season": "Winter",
#   "Rating (3)": "2"
# },

# Import the TSV generated by Google Sheets.
rows = CSV.read(tsv_db_file_path, headers: true, col_sep: "\t", liberal_parsing: true)

class Recipe < Struct.new(:title, :source, :author, :protein, :herbs, :day_of_week, :feeds, :season, :rating, :url, :tags)
  def self.create(title:, source:, author:, protein:, herbs:, day_of_week:, feeds:, season:, rating:, tags:)
    url = if source.to_s.start_with?("http")
      source
    else
      nil
    end
    new(title, source, author, protein, herbs, day_of_week, feeds, season, rating, url, tags)
  end

  def to_json(json_state = nil)
    to_h.to_json(json_state)
  end
end

recipe_list = rows.each_with_object([]) do |row, memo|
  next if row["Source"].nil?
  memo << Recipe.create(
    title: row["Recipe Name"],
    source: row["Source"],
    author: row["Author"],
    protein: row["Protein"].to_s.split(",").map(&:strip).map(&:downcase),
    herbs: row["Herbs"].to_s.split(",").map(&:strip).map(&:downcase),
    day_of_week: row["Day of Week"].to_s.downcase,
    feeds: row["Feeds"].to_i,
    season: row["Season"].to_s.downcase,
    rating: row["Rating (3)"].to_i,
    tags: [
      row["Protein"].to_s.downcase,
      *row["Herbs"].to_s.split(",").map(&:strip).map(&:downcase).map{|s| s.split("/")},
      row["Season"].to_s.downcase,
      row["Day of Week"].to_s.downcase,
    ].reject(&:empty?).flatten || ["fallback"]
  )
end

site = Jekyll::Site.new(Jekyll.configuration)
site.read
site.collections["recipes"].docs.each do |doc|
  next unless doc.data["category"].to_s.downcase == "dinner"
  row = {}
  recipe_list << Recipe.create(
    title: doc.data.fetch("title"),
    source: NOMZ_PROD_URL + doc.url,
    author: doc.data["author"],
    protein: doc.data["protein"],
    herbs: doc.data["herbs"],
    day_of_week: doc.data["day_of_week"],
    feeds: doc.data["feeds"].to_i,
    season: doc.data["season"],
    rating: doc.data["rating"].to_i,
    tags: doc.data["tags"],
  )
end

File.write(output_json_file_path, JSON.pretty_generate(recipe_list)+"\n")
